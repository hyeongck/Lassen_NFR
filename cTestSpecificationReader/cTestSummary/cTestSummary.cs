using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace cTestSummary
{
    public class cTestSummary
    {
        struct s_Positions
        {
            public int Generate_Position;
            public string Raw_Result_File_Path;
            public int Raw_Result_File_Position;
            public int Spec_Name_Position;
            public int HW_Bin_Position;
            public int TestNo_Position;
            public int TopFailure_Position;
        }
        public struct s_NewInfo
        {
            public string Generate_By;
            public string Regen_Append_Filename;
            public string New_Spec_Name;
            public string New_Spec_Version;
 
        }
        public struct s_HW_Binning
        {
            public int Bin_No;
            public string PF_Flag;
            public int Count;
            public double Percentage;
            public string HW_Bin_Name;
            public bool PassFlag;
        }
        public struct s_TestResult_Summary
        {
            public int TestNo;
            public string Type;
            public int Failure;
            public int Executions;
            public double Percentage;
            public string Test_Name;
        }

        private s_Positions Position_Info = new s_Positions();
        public s_HW_Binning[] HW_Binning;
        public s_TestResult_Summary[] Result_Summary;
        private s_TestResult_Summary[] Failure_Summary;

        public int Total_Unit_Tested;

        public string Summary_Filename;
        private string[] Lines;

        private int[] Failure_Pos;

        private int[] HW_Spacing = new int[5];
        private int[] TestNo_Spacing = new int[6];

        public int Filtered_Qty = 0;

        public cTestSummary()
        {
            Set_Spacing();
        }
        public bool Read_File()
        {
            if ((Summary_Filename != null) && (Summary_Filename != ""))
            {
                Lines = System.IO.File.ReadAllLines(Summary_Filename);
                ProcessInfo();
                Process_HWBin();
                Process_TestSummary();
                return true;
            }
            return false;   
        }
        public bool Read_Data(string Data)
        {
            Lines = Data.Split('\n');
            ProcessInfo();
            Process_HWBin();
            Process_TestSummary();
            return true;
        }
        public void Process_FilterHWBin(string Data)
        {
            Lines = Data.Split('\n');
            Process_FilterHWBin();
        }
        public void ProcessInfo()
        {
            int iPos;
            string xx;
            for (int iLine = 0; iLine < Lines.Length; iLine++)
            {
                if( Lines[iLine].Contains("Generated by"))
                {
                    iPos = Lines[iLine].IndexOf("by");

                    xx = Lines[iLine].Substring(0, iPos + 3);

                    Position_Info.Generate_Position = iLine;
                }
                if (Lines[iLine].Contains("Raw Result File") && Lines[iLine].Contains("Path"))
                {
                    Position_Info.Raw_Result_File_Path = Lines[iLine];
                    Position_Info.Raw_Result_File_Position = iLine;
                }
                if (Lines[iLine].Contains("Spec Name:"))
                {
                    Position_Info.Spec_Name_Position = iLine;
                }
                if (Lines[iLine].Contains("HW Bin No."))
                {
                    Position_Info.HW_Bin_Position = iLine;
                }
                if (Lines[iLine].Contains("Test Result Summary"))
                {
                    Position_Info.TestNo_Position = iLine;
                }
                if ((Lines[iLine].Contains("Top")) && (Lines[iLine].Contains("failure mode:")))
                {
                    Position_Info.TopFailure_Position = iLine;
                }
            }
        }
        public void Init_HW_Binning(int Bin_Count)
        {
            HW_Binning = new s_HW_Binning[Bin_Count]; 
        }
        public void Init_Test_Summary(int Serial_Count)
        {
            Result_Summary = new s_TestResult_Summary[Serial_Count];
            Failure_Summary = new s_TestResult_Summary[Serial_Count];
        }
        public void Process_FilterHWBin()
        {
            int HW_Array = 1;
            HW_Binning = new s_HW_Binning[1];
            for (int iLine = 3; iLine < Lines.Length; iLine++)
            {
                if (Lines[iLine].Trim() != "")
                {
                    if (HW_Array > 1)
                    {
                        Array.Resize(ref HW_Binning, HW_Array);
                    }
                    string[] Data = Lines[iLine].Trim().Split(' ');
                    FillData(Data, HW_Array - 1);
                    HW_Array++;
                }
                else
                {
                    break;
                }
            }
            Total_Unit_Tested = 0;
            for (int iHW = 0; iHW < HW_Binning.Length; iHW++)
            {
                Total_Unit_Tested += HW_Binning[iHW].Count;
            }
        }
        public void Process_HWBin()
        {
            int HW_Array = 1;
            HW_Binning = new s_HW_Binning[1];
            for (int iLine = Position_Info.HW_Bin_Position + 2; iLine < Position_Info.TestNo_Position; iLine++)
            {
                if (Lines[iLine].Trim() != "")
                {
                    if (HW_Array > 1)
                    {
                        Array.Resize(ref HW_Binning, HW_Array);
                    }
                    string[] Data = Lines[iLine].Trim().Split(' ');
                    FillData(Data, HW_Array - 1);
                    HW_Array++;
                }
                else
                {
                    break;
                }
            }
        }
        void FillData(string[] Data, int item)
        {
            int ColumnData = 0;
            for (int iDat = 0; iDat < Data.Length; iDat++)
            {
                if (Data[iDat].Trim() != "")
                {
                    switch (ColumnData)
                    {
                        case 0:
                            HW_Binning[item].Bin_No = int.Parse(Data[iDat]);
                            break;
                        case 1:
                            HW_Binning[item].PF_Flag = Data[iDat];
                            break;
                        case 2:
                            HW_Binning[item].Count = int.Parse(Data[iDat]);
                            break;
                        case 3:
                            HW_Binning[item].Percentage = double.Parse(Data[iDat]);
                            break;
                        case 4:
                            HW_Binning[item].HW_Bin_Name = Data[iDat];
                            if (Data[iDat].ToUpper().Contains("PASS"))
                            {
                                HW_Binning[item].PassFlag = true;
                            }
                            else
                            {
                                HW_Binning[item].PassFlag = false;
                            }
                            break;
                    }
                    ColumnData++;
                }
            }
        }
        public void Process_TestSummary()
        {
            int Test_Array = 1;
            Result_Summary = new s_TestResult_Summary[1];
            for (int iLine = Position_Info.TestNo_Position + 3; iLine < Position_Info.TopFailure_Position; iLine++)
            {
                if (Lines[iLine].Trim() != "")
                {
                    if (Test_Array > 1)
                    {
                        Array.Resize(ref Result_Summary, Test_Array);
                    }
                    string[] Data = Lines[iLine].Trim().Split(' ');
                    FillInTestData(Data, Test_Array - 1);
                    Test_Array++;
                }
                else
                {
                    break;
                }
            }
            Total_Unit_Tested = Result_Summary[0].Executions;
        }
        void FillInTestData(string[] Data, int item)
        {
            int ColumnData = 0;
            for (int iCol = 0; iCol < Data.Length; iCol++)
            {
                if (Data[iCol].Trim() != "")
                {
                    switch (ColumnData)
                    {
                        case 0:
                            Result_Summary[item].TestNo = int.Parse(Data[iCol]);
                            break;
                        case 1:
                            Result_Summary[item].Type = Data[iCol];
                            break;
                        case 2:
                            Result_Summary[item].Executions = int.Parse(Data[iCol]);
                            break;
                        case 3:
                            Result_Summary[item].Failure = int.Parse(Data[iCol]);
                            break;
                        case 4:
                            Result_Summary[item].Percentage = double.Parse(Data[iCol]);
                            break;
                        case 5:
                            Result_Summary[item].Test_Name = Data[iCol];
                            break;
                    }
                    ColumnData++;
                }
            }
        }
        public void Process_HW_Binning()
        {
            int Count = 0;
            for (int iBin = 0; iBin < HW_Binning.Length; iBin++)
            {
                Count += HW_Binning[iBin].Count;
            }
            for (int iBin = 0; iBin < HW_Binning.Length; iBin++)
            {
                HW_Binning[iBin].Percentage = (HW_Binning[iBin].Count / Count * 100);
            }
        }
        public void Process_Test_Summary()
        {
            for (int iSerial = 0; iSerial < Result_Summary.Length; iSerial++)
            {
                Result_Summary[iSerial].Percentage = 100 - (Result_Summary[iSerial].Failure / Total_Unit_Tested * 100);
            }
        }
        public void Process_TopFailures()
        {
            Failure_Summary = Result_Summary;
            Array.Sort(Failure_Summary, delegate(s_TestResult_Summary F1, s_TestResult_Summary F2) { return F1.Percentage.CompareTo(F2.Percentage); });
        }

        private void Set_Spacing()
        {
            HW_Spacing[0] = 5;
            HW_Spacing[1] = 12;
            HW_Spacing[2] = 9;
            HW_Spacing[3] = 15;
            HW_Spacing[4] = 13;
            TestNo_Spacing[0] = 2;
            TestNo_Spacing[1] = 12;
            TestNo_Spacing[2] = 7;
            TestNo_Spacing[3] = 13;
            TestNo_Spacing[4] = 12;
            TestNo_Spacing[5] = 10;
        }
        public string Process_Summary_WithFilter()
        {
            StringBuilder sbSummary = new StringBuilder();
            StringBuilder sbHW = new StringBuilder();

            if (Filtered_Qty > 0)
            {
                for (int iHW = 0; iHW < HW_Binning.Length; iHW++)
                {
                    if (HW_Binning[iHW].PassFlag)
                    {
                        HW_Binning[iHW].Count -= Filtered_Qty;
                        HW_Binning[iHW].Percentage = (double)HW_Binning[iHW].Count / (double)Total_Unit_Tested * 100.0;
                        break;
                    }
                }
                Array.Resize(ref HW_Binning, HW_Binning.Length + 1);
                HW_Binning[HW_Binning.Length - 1].Bin_No = 99;
                HW_Binning[HW_Binning.Length - 1].Count = Filtered_Qty;
                HW_Binning[HW_Binning.Length - 1].HW_Bin_Name = "PATTERN FILTER DIE";
                HW_Binning[HW_Binning.Length - 1].PassFlag = false;
                HW_Binning[HW_Binning.Length - 1].Percentage = (double)Filtered_Qty / (double)Total_Unit_Tested * 100.00;
                HW_Binning[HW_Binning.Length - 1].PF_Flag = "F";
            }

            for (int i = 0; i < 3; i++)
            {
                sbSummary.AppendFormat("{0}\r\n", Lines[i]);
            }

            for (int i = 0; i < HW_Binning.Length; i++)
            {
                sbHW.AppendFormat("     " + HW_Binning[i].Bin_No.ToString().PadRight(HW_Spacing[1])
                                 + convert_flag(HW_Binning[i].PassFlag).PadRight(HW_Spacing[2])
                                 + HW_Binning[i].Count.ToString().PadRight(HW_Spacing[3])
                                 + HW_Binning[i].Percentage.ToString("0.00").PadRight(HW_Spacing[4])
                                 + HW_Binning[i].HW_Bin_Name + "\r\n");

            }
            sbSummary.Append(sbHW.ToString());
            sbSummary.Append("\r\n");
            sbSummary.Append("\r\n");
            //for (int i = Position_Info.TestNo_Position; i < Lines.Length; i++)
            //{
            //    sbSummary.AppendFormat("{0}\r\n", Lines[i]);
            //}

            return sbSummary.ToString();
        }
        public void Process_Summary_WithFilter(string OutputFile)
        {
            

            StringBuilder sbSummary = new StringBuilder();
            StringBuilder sbHW = new StringBuilder();

            if (Filtered_Qty > 0)
            {
                for (int iHW = 0; iHW < HW_Binning.Length; iHW++)
                {
                    if (HW_Binning[iHW].PassFlag)
                    {
                        HW_Binning[iHW].Count -= Filtered_Qty;
                        HW_Binning[iHW].Percentage = (double)HW_Binning[iHW].Count / (double)Total_Unit_Tested * 100.0;
                        break;
                    }
                }
                Array.Resize(ref HW_Binning, HW_Binning.Length + 1);
                HW_Binning[HW_Binning.Length - 1].Bin_No = 99;
                HW_Binning[HW_Binning.Length - 1].Count = Filtered_Qty;
                HW_Binning[HW_Binning.Length - 1].HW_Bin_Name = "PATTERN FILTER DIE";
                HW_Binning[HW_Binning.Length - 1].PassFlag = false;
                HW_Binning[HW_Binning.Length - 1].Percentage = (double)Filtered_Qty / (double)Total_Unit_Tested * 100.00;
                HW_Binning[HW_Binning.Length - 1].PF_Flag = "F";
            }

            for (int i = 0; i < Position_Info.HW_Bin_Position + 2; i++)
            {
                sbSummary.AppendFormat("{0}\r\n", Lines[i]);
            }

            for (int i = 0; i < HW_Binning.Length; i++)
            {
                sbHW.AppendFormat("     " + HW_Binning[i].Bin_No.ToString().PadRight(HW_Spacing[1])
                                 + convert_flag(HW_Binning[i].PassFlag).PadRight(HW_Spacing[2])
                                 + HW_Binning[i].Count.ToString().PadRight(HW_Spacing[3])
                                 + HW_Binning[i].Percentage.ToString("0.00").PadRight(HW_Spacing[4])
                                 + HW_Binning[i].HW_Bin_Name + "\r\n");
                
            }
            sbSummary.Append(sbHW.ToString());
            sbSummary.Append("\r\n");
            sbSummary.Append("\r\n");
            for (int i = Position_Info.TestNo_Position; i < Lines.Length; i++)
            {
                sbSummary.AppendFormat("{0}\r\n", Lines[i]);
            }

            if(System.IO.File.Exists(OutputFile))
            {
                System.IO.File.Delete(OutputFile);
            }
            System.IO.File.WriteAllText(OutputFile, sbSummary.ToString());
        }
        public string convert_flag(bool input)
        {
            if (input)
            {
                return "P";
            }
            else
            {
                return "F";
            }
        }
    }
}
